#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

// Enabling https
var https = require('https');
var fs = require('fs');
var path = require('path');
// var privateKey = fs.readFileSync(path.join(__dirname, './certificate/private.pem'), 'utf8');
// var certificate = fs.readFileSync(path.join(__dirname, './certificate/ca.cer'), 'utf8');
var certOptions = {
  key: fs.readFileSync(path.resolve('bin/server.key')),
  cert: fs.readFileSync(path.resolve('bin/server.crt'))
};


/**
 * Get port from environment and store in Express.
 */

var PORT = process.env.PORT || '3001';
var SSLPORT = process.env.SSLPORT || '443';
app.set('port', PORT);

/**
 * Create HTTP & HTTPS server.
 */

var httpServer = http.createServer(app);
var httpsServer = https.createServer(certOptions, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(PORT);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

httpsServer.listen(SSLPORT, () => {
  console.log('https server running on port:', SSLPORT);
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('http server running on port: ', PORT);
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
